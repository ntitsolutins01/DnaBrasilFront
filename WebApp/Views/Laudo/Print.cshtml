@model List<WebApp.Models.LaudoModel>
@using System.Globalization
@{
    Layout = null;

    async Task RenderHeaderAsync(WebApp.Models.LaudoModel laudo)
    {
        <header class="header">
            <img src="~/assets/images/logo2.png" alt="DNA do Brasil" class="logo-dna" />
            <div class="talent-info">
                <div class="text-info">
                    <div class="talent-label">MEU TALENTO</div>
                    <div class="talent-name">VOLEIBOL</div>
                </div>
                <img src="/assets/assets_Laudo/icon_info_esporte.png" alt="Voleibol" class="sport-icon" />
            </div>
        </header>
    }

    async Task RenderStudentInfoAsync(WebApp.Models.LaudoModel laudo)
    {
        <div class="left-section">
            <div class="student-info">
                <div class="student-photo">
                    @if (laudo.Laudo.ByteImage != null)
                    {
                        var imgSrc = $"data:image/gif;base64,{Convert.ToBase64String(laudo.Laudo.ByteImage)}";
                        <img src="@imgSrc" style="width:100%; height:100%; object-fit:cover;" />
                    }
                    else
                    {
                        <img src="/assets/images/user.png" style="width:100%;" />
                    }
                </div>
                <div class="class-info">
                    <div>Série: 8º ano</div>
                    <div>Turma: D</div>
                </div>
            </div>
            <div class="student-details">
                <div class="student-name">@laudo.Laudo.NomeAluno</div>
                <div class="student-email">@laudo.Laudo.Email</div>
                <div class="student-school">@laudo.Laudo.NomeLocalidade</div>
            </div>
        </div>
    }

    async Task RenderDnaScoreAsync(WebApp.Models.LaudoModel laudo)
    {
        <div class="dna-score">
            <div class="circular-progress" style="--progress: (@laudo.Desempenho.ScoreDna)/6; --color-main: #00eabc; --color-second: #c0faee;">
                <div class="circular-progress-inner">
                    <div class="circular-progress-value">@laudo.Desempenho.ScoreDna</div>
                    <div class="circular-progress-label">DNA</div>
                </div>
            </div>
            <div class="score-info">
                <div style="font-weight: 600; margin-bottom: 6px;">O que é o índice DNA?</div>
                <div style="font-size: 14px">O Score DNA é um sistema que permitirá acompanhar seu rendimento em diferentes momentos.</div>
            </div>
        </div>
    }

    async Task RenderMetricCardAsync(string title, double score, string colorMain, string colorSecond, string message, string description = null)
    {
        <div class="metric-card">
            <div class="card-header @title.ToLower()">
                <div class="card-title">@title</div>
                <div class="card-score">
                    <div class="circular-progress" style="--progress: @score; --color-main: @colorMain; --color-second: @colorSecond;">
                        <div class="circular-progress-inner">
                            <div class="circular-progress-value">@score</div>
                        </div>
                    </div>
                </div>
            </div>
            <h3>@message</h3>
            @if (!string.IsNullOrEmpty(description))
            {
                <p style="flex-grow: 1">@description</p>
            }
        </div>
    }

    async Task RenderSectionHeaderAsync(string title, double score, string colorMain, string colorSecond)
    {
        <div class="section-header" style="margin-top: 20px;">
            <div class="card-header @title.ToLower()">
                <div class="card-title">@title</div>
                <div class="card-score">
                    <div class="circular-progress" style="--progress: @score; --color-main: @colorMain; --color-second: @colorSecond;">
                        <div class="circular-progress-inner">
                            <div class="circular-progress-value">@score</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    async Task RenderSportCardAsync(string title, string unit, string value, string message, string description = null, bool showProgressBar = false)
    {
        <div class="sport-card">
            <h3>@title</h3>
            @if (!string.IsNullOrEmpty(message))
            {
                <p>@message</p>
            }
            <div class="metric-value" style="@(showProgressBar ? "border-bottom: none" : "")">
                <span>@unit</span>
                <span class="@(title.Contains("Impulsão") ? "sport" : "default")">@value</span>
            </div>
            @if (showProgressBar)
            {
                <div class="progress-bar @(title.Contains("Impulsão") ? "progress-bar-sport" : "")">
                    <div class="progress @(title.Contains("Impulsão") ? "progress-sport" : "")" style="width: 50%;"></div>
                </div>
            }
            @if (!string.IsNullOrEmpty(description))
            {
                <p class="description">@description</p>
            }
        </div>
    }
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DNA do Brasil Talentos - Impessão em Lote Laudos</title>
    <link href="https://fonts.googleapis.com/css?family=Ubuntu&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
    <link rel="stylesheet" href="~/assets/styles_Laudo/indexLote.css" media="all" />
    <link rel="stylesheet" href="~/assets/styles_Laudo/pages.css" media="all" />
</head>
<body>
    <div class="navigation-bar">
        <div class="page-navigation">
            <button class="nav-button" id="prevButton" onclick="previousPage()" title="Página Anterior">
                <span class="material-icons">arrow_upward</span>
            </button>
            <div class="page-counter">
                <span id="currentPage">0</span>/<span id="totalPages">0</span>
            </div>
            <button class="nav-button" id="nextButton" onclick="nextPage()" title="Próxima Página">
                <span class="material-icons">arrow_downward</span>
            </button>
        </div>
        <div class="action-buttons">
            <button class="action-button" onclick="printDocument()" title="Imprimir">
                <span class="material-icons">print</span>
            </button>
            <button class="action-button" onclick="downloadDocument()" title="Baixar">
                <span class="material-icons">download</span>
            </button>
        </div>
    </div>

    @foreach (var laudo in Model)
    {
        if (laudo.Saude != null || laudo.EncaminhamentoSaudeBucal != null ||
        laudo.EncaminhamentoConsumoAlimentar != null || laudo.Vocacional != null)
        {
            <div class="page-container page1">
                <div class="newContainer">
                    @{
                        await RenderHeaderAsync(laudo);
                    }
                    <section class="info-section">
                        @{
                            await RenderStudentInfoAsync(laudo);
                            await RenderDnaScoreAsync(laudo);
                        }
                    </section>

                    <div class="cards-grid">
                        @if (laudo.Saude != null)
                        {
                            await RenderMetricCardAsync("Saúde", laudo.Desempenho.ScoreSaude, "#efad57", "#ffeed9",
                            "Índice de massa corporal", laudo.Desempenho.TextoImc);
                        }

                        @if (laudo.EncaminhamentoSaudeBucal != null)
                        {
                            await RenderMetricCardAsync("Saúde Bucal", laudo.Desempenho.ScoreSaudeBucal, "#e96c52", "#fce3de",
                            laudo.Desempenho.AvisoSaudeBucal, laudo.EncaminhamentoSaudeBucal.Descricao);
                        }

                        @if (laudo.EncaminhamentoConsumoAlimentar != null)
                        {
                            await RenderMetricCardAsync("Consumo Alimentar", laudo.Desempenho.ScoreConsumoAlimentar, "#73dc69", "#deffdc",
                            laudo.Desempenho.AvisoConsumoAlimentar, laudo.EncaminhamentoConsumoAlimentar.Descricao);
                        }

                        @if (laudo.Vocacional != null)
                        {
                            await RenderMetricCardAsync("Vocação", 100, "#5b5c9c", "#d5d6e7",
                            "Interesse Artístico", "Pessoas nessa área apresentam situações estruturadas que envolvem a autoexpressão de ideias e conceitos através de diferentes meios artísticos. É aberto a estímulos emocionais, capaz de perceber as reações das pessoas.");
                        }
                    </div>
                </div>
                <div class="page-date">
                    @DateTime.Now.ToString("D", CultureInfo.CreateSpecificCulture("pt-BR")).ToUpper()
                </div>
            </div>
        }

        @if (laudo.QualidadeDeVida != null || laudo.TalentoEsportivo != null)
        {
            <div class="page-container page1">
                <div class="newContainer">
                    @if (laudo.Saude == null && laudo.EncaminhamentoSaudeBucal == null &&
                   laudo.EncaminhamentoConsumoAlimentar == null && laudo.Vocacional == null)
                    {
                        await RenderHeaderAsync(laudo);
                        <section class="info-section" style="margin-bottom: 20px;">
                            @{
                                await RenderStudentInfoAsync(laudo);
                                await RenderDnaScoreAsync(laudo);
                            }
                        </section>
                    }

                    @if (laudo.TalentoEsportivo != null)
                    {
                        <section class="sport-section">
                            @{
                                await RenderSectionHeaderAsync("Esporte", laudo.Desempenho.ScoreTalentoEsportivo, "#df436c", "#f7d1db");
                            }

                            <div class="sport-grid">
                                @{
                                    await RenderSportCardAsync("Índice de Massa Corporal", "imc",
                                    laudo.Laudo.ImcSaude.ToString(), laudo.Desempenho.AvisoImc,
                                    laudo.Desempenho.AvisoImc, true);

                                    await RenderSportCardAsync("Velocidade 20m", "seg",
                                    laudo.TalentoEsportivo.Velocidade.ToString(), "",
                                    laudo.Desempenho.TextoVelocidade);

                                    await RenderSportCardAsync("Impulsão Horizontal", "cm",
                                    laudo.TalentoEsportivo.ImpulsaoHorizontal.ToString(),
                                    laudo.Desempenho.AvisoImpulsao, laudo.Desempenho.TextoImpulsao, true);

                                    await RenderSportCardAsync("Flexibilidade", "cm",
                                    laudo.TalentoEsportivo.Flexibilidade.ToString(),
                                    laudo.Desempenho.AvisoFlexibilidadeMuscular,
                                    laudo.Desempenho.TextoFlexibilidadeMuscular, true);

                                    await RenderSportCardAsync("Aptidão Aeróbica", "seg",
                                    laudo.TalentoEsportivo.Vo2Max.ToString(), "",
                                    laudo.Desempenho.TextoAptidaoCardio);

                                    await RenderSportCardAsync("Preensão Manual", "kg",
                                    laudo.TalentoEsportivo.PreensaoManual.ToString(),
                                    laudo.Desempenho.AvisoForcaMembrosSup,
                                    laudo.Desempenho.TextoForcaMembrosSup, true);
                                }
                            </div>
                        </section>
                    }

                    @if (laudo.QualidadeDeVida != null)
                    {
                        <section class="quality-section">
                            @{
                                await RenderSectionHeaderAsync("Qualidade de Vida", laudo.Desempenho.ScoreVida, "#23bfff", "#c8eeff");
                            }

                            <div class="quality-grid">
                                @{
                                    var textosVida = new List<string>
                    {
                    laudo.Desempenho.TextoBemEstar,
                    laudo.Desempenho.TextoAutoestima,
                    laudo.Desempenho.TextoFamilia,
                    laudo.Desempenho.TextoContexto
                    };

                                    for (var i = 0; i < laudo.QualidadeDeVida.Count; i++)
                                    {
                                        <div class="quality-card">
                                            <h3>@laudo.QualidadeDeVida[i].Nome</h3>
                                            <p>@textosVida[i]</p>
                                        </div>
                                    }
                                }
                            </div>
                        </section>
                    }
                </div>
            </div>
        }
    }

    <script src="~/assets/scripts_Laudo/index.js"></script>
</body>
</html>